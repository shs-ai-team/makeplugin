{
  "messages": [
    {
      "role": "consultant",
      "content": "Hi, I am Plugin Pal - your WordPress plugin assistant!\n To begin, please describe the plugin you want to create.",
      "requirements": {},
      "requirements_finalized": false
    },
    {
      "role": "user",
      "content": "Can you make a todolist plugin thats  small minimalistic . i should be able to addd tasks, delete, and mark as done not done"
    },
    {
      "role": "consultant",
      "content": "Great idea! Quick questions to finalize: should this be a personal list for each logged\u2011in user or one shared list for the whole site, and where should the list appear\u2014only in your site\u2019s admin area or also on a public page? If it\u2019s just a task title with no other fields, I\u2019ll keep it that minimal.",
      "requirements_finalized": false,
      "requirements": {
        "name": "Minimal To\u2011Do",
        "description": "A small, minimal to\u2011do list with add, delete, and mark done/not done.",
        "details": "Provide a clean, distraction\u2011free to\u2011do list where users can add a task (text only), mark it done/undone, and delete it. Keep the interface minimal with a single input and a simple list. No extra fields (no dates, priorities, or categories). Tasks persist across sessions. Default order: newest on top. Basic, unobtrusive styling matching the site. No bulk actions or editing\u2014just add, toggle, and delete."
      }
    },
    {
      "role": "user",
      "content": "Can be login based, oublic page addable"
    },
    {
      "role": "consultant",
      "content": "Perfect\u2014this will be a per\u2011user list that you can place on any public page, with a sign\u2011in prompt for guests. I\u2019ve got everything I need; I\u2019ll start generating the plugin now. Please hold on.",
      "requirements_finalized": true,
      "requirements": {
        "name": "Minimal To\u2011Do",
        "description": "A small, per\u2011user to\u2011do list that can be placed on public pages.",
        "details": "Provide a clean, distraction\u2011free to\u2011do list where logged\u2011in users can add a task (text only), mark it done/undone, and delete it. Lists are personal per user (login\u2011based) and persist across sessions. The to\u2011do can be placed on any public page; when viewed by a logged\u2011in user it shows their own list, and guests see a simple sign\u2011in prompt instead of controls. Keep the interface minimal with a single input and a simple list; default order is newest on top. No extra fields (no dates, priorities, categories) and no bulk actions or editing beyond toggle and delete. Use unobtrusive styling that blends with the site."
      }
    },
    {
      "role": "developer",
      "content": "I've created your plugin, packaged as a zip, ready to download and install!. Here are some instructions on how to get started with it:\nIn your WordPress dashboard, go to Plugins > Add New > Upload Plugin, select the ZIP we provided, then Install and Activate it. To place the to\u2011do list on your site, add the shortcode [minimal_todo] to any page or post and publish/update. Each logged\u2011in user will see and manage their own tasks; visitors who aren\u2019t signed in will see a simple sign\u2011in prompt.\n'''",
      "zip_id": 0,
      "raw_response": "## Folder Structure\n```\nminimal-to-do/\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 js/\n\u2502       \u2514\u2500\u2500 main.js\n\u251c\u2500\u2500 includes/\n\u2502   \u251c\u2500\u2500 class-mtd-ajax.php\n\u2502   \u2514\u2500\u2500 functions.php\n\u251c\u2500\u2500 languages/\n\u2502   \u2514\u2500\u2500 minimal-to-do.pot\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 item.php\n\u251c\u2500\u2500 minimal-to-do.php\n\u251c\u2500\u2500 readme.txt\n\u2514\u2500\u2500 uninstall.php\n```\n\n## Plugin Files\n```json\n{\n  \"minimal-to-do/minimal-to-do.php\": \"<?php\\n/**\\n * Plugin Name: Minimal To\u2011Do\\n * Description: A small, per\u2011user to\u2011do list that can be placed on public pages.\\n * Version: 1.0.0\\n * Author: makeplugin\\n * Text Domain: minimal-to-do\\n * License: GPLv2 or later\\n */\\n\\nif (!defined('ABSPATH')) {\\n    exit;\\n}\\n\\nif (!defined('MTD_VERSION')) {\\n    define('MTD_VERSION', '1.0.0');\\n}\\nif (!defined('MTD_PLUGIN_FILE')) {\\n    define('MTD_PLUGIN_FILE', __FILE__);\\n}\\nif (!defined('MTD_PLUGIN_DIR')) {\\n    define('MTD_PLUGIN_DIR', plugin_dir_path(__FILE__));\\n}\\nif (!defined('MTD_PLUGIN_URL')) {\\n    define('MTD_PLUGIN_URL', plugin_dir_url(__FILE__));\\n}\\n\\n// Load text domain.\\nfunction mtd_load_textdomain() {\\n    load_plugin_textdomain('minimal-to-do', false, dirname(plugin_basename(__FILE__)) . '/languages');\\n}\\nadd_action('plugins_loaded', 'mtd_load_textdomain');\\n\\n// Includes.\\nrequire_once MTD_PLUGIN_DIR . 'includes/functions.php';\\nrequire_once MTD_PLUGIN_DIR . 'templates/item.php';\\nrequire_once MTD_PLUGIN_DIR . 'includes/class-mtd-ajax.php';\\n\\n// Shortcode renderer and assets.\\nfunction mtd_enqueue_assets() {\\n    wp_enqueue_style(\\n        'mtd-style',\\n        MTD_PLUGIN_URL . 'assets/css/style.css',\\n        array(),\\n        MTD_VERSION\\n    );\\n\\n    wp_enqueue_script(\\n        'mtd-script',\\n        MTD_PLUGIN_URL . 'assets/js/main.js',\\n        array('jquery'),\\n        MTD_VERSION,\\n        true\\n    );\\n\\n    $data = array(\\n        'ajax_url' => admin_url('admin-ajax.php'),\\n        'nonce'    => wp_create_nonce('mtd_nonce'),\\n        'i18n'     => array(\\n            /* translators: Button label to delete a task */\\n            'delete' => esc_html__('Delete', 'minimal-to-do'),\\n            /* translators: Checkbox label to mark task done */\\n            'done'   => esc_html__('Done', 'minimal-to-do'),\\n            /* translators: Placeholder for task input */\\n            'placeholder' => esc_html__('Add a task\u2026', 'minimal-to-do'),\\n            /* translators: Button label to add task */\\n            'add' => esc_html__('Add', 'minimal-to-do')\\n        )\\n    );\\n    wp_localize_script('mtd-script', 'MTD', $data);\\n}\\n\\nfunction mtd_shortcode($atts = array(), $content = null) {\\n    $atts = shortcode_atts(array(), $atts, 'minimal_todo');\\n\\n    // Enqueue assets only when shortcode is used.\\n    mtd_enqueue_assets();\\n\\n    ob_start();\\n\\n    echo '<div class=\\\"mtd-wrapper\\\" data-nonce=\\\"' . esc_attr(wp_create_nonce('mtd_nonce')) . '\\\">';\\n\\n    if (!is_user_logged_in()) {\\n        $login_url = wp_login_url(get_permalink());\\n        echo '<p class=\\\"mtd-login-prompt\\\">' . wp_kses_post(sprintf(\\n            /* translators: %s: login URL */\\n            __(\\\"Please <a href=\\\\\\\"%s\\\\\\\">sign in</a> to manage your to\u2011do list.\\\", 'minimal-to-do'),\\n            esc_url($login_url)\\n        )) . '</p>';\\n        echo '</div>';\\n        return ob_get_clean();\\n    }\\n\\n    echo '<form class=\\\"mtd-form\\\" action=\\\"#\\\" method=\\\"post\\\" novalidate>\\\\n';\\n    echo '  <label class=\\\"screen-reader-text\\\" for=\\\"mtd-new-task\\\">' . esc_html__('Add a task', 'minimal-to-do') . '</label>\\\\n';\\n    echo '  <input type=\\\"text\\\" id=\\\"mtd-new-task\\\" name=\\\"task\\\" maxlength=\\\"200\\\" placeholder=\\\"' . esc_attr__('Add a task\u2026', 'minimal-to-do') . '\\\" />\\\\n';\\n    echo '  <button type=\\\"submit\\\" class=\\\"mtd-add-btn\\\">' . esc_html__('Add', 'minimal-to-do') . '</button>\\\\n';\\n    echo '</form>';\\n\\n    $tasks = mtd_get_tasks(get_current_user_id());\\n\\n    echo '<ul class=\\\"mtd-list\\\" aria-live=\\\"polite\\\">';\\n    if (!empty($tasks) && is_array($tasks)) {\\n        foreach ($tasks as $task) {\\n            // Render each task item using template.\\n            echo mtd_render_item($task);\\n        }\\n    }\\n    echo '</ul>';\\n\\n    echo '</div>';\\n\\n    return ob_get_clean();\\n}\\nadd_shortcode('minimal_todo', 'mtd_shortcode');\\n\",\n  \"minimal-to-do/includes/functions.php\": \"<?php\\nif (!defined('ABSPATH')) {\\n    exit;\\n}\\n\\n/**\\n * Get tasks for a user.\\n *\\n * @param int $user_id\\n * @return array\\n */\\nfunction mtd_get_tasks($user_id) {\\n    $tasks = get_user_meta((int) $user_id, 'mtd_tasks', true);\\n    if (!is_array($tasks)) {\\n        $tasks = array();\\n    }\\n    return $tasks;\\n}\\n\\n/**\\n * Save tasks for a user.\\n *\\n * @param int   $user_id\\n * @param array $tasks\\n * @return bool\\n */\\nfunction mtd_save_tasks($user_id, $tasks) {\\n    if (!is_array($tasks)) {\\n        $tasks = array();\\n    }\\n    return (bool) update_user_meta((int) $user_id, 'mtd_tasks', array_values($tasks));\\n}\\n\\n/**\\n * Sanitize a task's text.\\n *\\n * @param string $text\\n * @return string\\n */\\nfunction mtd_sanitize_task_text($text) {\\n    $text = sanitize_text_field($text);\\n    $text = mb_substr($text, 0, 200);\\n    return $text;\\n}\\n\\n/**\\n * Find task index by ID.\\n *\\n * @param array  $tasks\\n * @param string $id\\n * @return int Index or -1 if not found.\\n */\\nfunction mtd_find_task_index($tasks, $id) {\\n    if (!is_array($tasks)) {\\n        return -1;\\n    }\\n    foreach ($tasks as $index => $task) {\\n        if (isset($task['id']) && (string) $task['id'] === (string) $id) {\\n            return (int) $index;\\n        }\\n    }\\n    return -1;\\n}\\n\",\n  \"minimal-to-do/includes/class-mtd-ajax.php\": \"<?php\\nif (!defined('ABSPATH')) {\\n    exit;\\n}\\n\\nclass MTD_Ajax {\\n    public function __construct() {\\n        add_action('wp_ajax_mtd_add', array($this, 'add'));\\n        add_action('wp_ajax_mtd_toggle', array($this, 'toggle'));\\n        add_action('wp_ajax_mtd_delete', array($this, 'delete'));\\n    }\\n\\n    private function check_security() {\\n        if (!is_user_logged_in()) {\\n            wp_send_json_error(array('message' => esc_html__('You must be logged in.', 'minimal-to-do')), 403);\\n        }\\n        check_ajax_referer('mtd_nonce', 'nonce');\\n    }\\n\\n    public function add() {\\n        $this->check_security();\\n        $task_text = isset($_POST['task']) ? mtd_sanitize_task_text(wp_unslash($_POST['task'])) : '';\\n        if ($task_text === '') {\\n            wp_send_json_error(array('message' => esc_html__('Task cannot be empty.', 'minimal-to-do')), 400);\\n        }\\n\\n        $user_id = get_current_user_id();\\n        $tasks   = mtd_get_tasks($user_id);\\n\\n        $new = array(\\n            'id'      => function_exists('wp_generate_uuid4') ? wp_generate_uuid4() : uniqid('mtd_', true),\\n            'text'    => $task_text,\\n            'done'    => false,\\n            'created' => time(),\\n        );\\n\\n        // Prepend to keep newest on top.\\n        array_unshift($tasks, $new);\\n        mtd_save_tasks($user_id, $tasks);\\n\\n        wp_send_json_success(array('task' => $new));\\n    }\\n\\n    public function toggle() {\\n        $this->check_security();\\n        $id = isset($_POST['id']) ? sanitize_text_field(wp_unslash($_POST['id'])) : '';\\n        if ($id === '') {\\n            wp_send_json_error(array('message' => esc_html__('Invalid task ID.', 'minimal-to-do')), 400);\\n        }\\n\\n        $user_id = get_current_user_id();\\n        $tasks   = mtd_get_tasks($user_id);\\n        $index   = mtd_find_task_index($tasks, $id);\\n\\n        if (-1 === $index) {\\n            wp_send_json_error(array('message' => esc_html__('Task not found.', 'minimal-to-do')), 404);\\n        }\\n\\n        $tasks[$index]['done'] = !empty($tasks[$index]['done']) ? false : true;\\n        mtd_save_tasks($user_id, $tasks);\\n\\n        wp_send_json_success(array('task' => $tasks[$index]));\\n    }\\n\\n    public function delete() {\\n        $this->check_security();\\n        $id = isset($_POST['id']) ? sanitize_text_field(wp_unslash($_POST['id'])) : '';\\n        if ($id === '') {\\n            wp_send_json_error(array('message' => esc_html__('Invalid task ID.', 'minimal-to-do')), 400);\\n        }\\n\\n        $user_id = get_current_user_id();\\n        $tasks   = mtd_get_tasks($user_id);\\n        $index   = mtd_find_task_index($tasks, $id);\\n\\n        if (-1 === $index) {\\n            wp_send_json_error(array('message' => esc_html__('Task not found.', 'minimal-to-do')), 404);\\n        }\\n\\n        array_splice($tasks, $index, 1);\\n        mtd_save_tasks($user_id, $tasks);\\n\\n        wp_send_json_success(array('id' => $id));\\n    }\\n}\\n\\nnew MTD_Ajax();\\n\",\n  \"minimal-to-do/templates/item.php\": \"<?php\\nif (!defined('ABSPATH')) {\\n    exit;\\n}\\n\\n/**\\n * Render a single task item as HTML list element.\\n *\\n * @param array $task\\n * @return string\\n */\\nfunction mtd_render_item($task) {\\n    $id      = isset($task['id']) ? (string) $task['id'] : '';\\n    $text    = isset($task['text']) ? (string) $task['text'] : '';\\n    $done    = !empty($task['done']);\\n    $classes = 'mtd-item' . ($done ? ' is-done' : '');\\n\\n    ob_start();\\n    echo '<li class=\\\"' . esc_attr($classes) . '\\\" data-id=\\\"' . esc_attr($id) . '\\\">';\\n    echo '  <button type=\\\"button\\\" class=\\\"mtd-toggle\\\" aria-pressed=\\\"' . esc_attr($done ? 'true' : 'false') . '\\\">';\\n    echo '    <span class=\\\"screen-reader-text\\\">' . esc_html__('Toggle done', 'minimal-to-do') . '</span>';\\n    echo '  </button>';\\n    echo '  <span class=\\\"mtd-text\\\">' . esc_html($text) . '</span>';\\n    echo '  <button type=\\\"button\\\" class=\\\"mtd-delete\\\" aria-label=\\\"' . esc_attr__('Delete task', 'minimal-to-do') . '\\\">';\\n    echo '    <span class=\\\"screen-reader-text\\\">' . esc_html__('Delete', 'minimal-to-do') . '</span>';\\n    echo '  </button>';\\n    echo '</li>';\\n    return ob_get_clean();\\n}\\n\",\n  \"minimal-to-do/assets/css/style.css\": \"/* Minimal To-Do styles */\\n.mtd-wrapper{max-width:600px;margin:1em 0;padding:.5em;border:1px solid rgba(0,0,0,.06);border-radius:6px;background:#fff}\\n.mtd-form{display:flex;gap:.5em;margin-bottom:.75em}\\n.mtd-form input[type=text]{flex:1;min-width:0;padding:.5em .6em;border:1px solid #ccd0d4;border-radius:4px}\\n.mtd-form .mtd-add-btn{padding:.5em .9em;border:1px solid #2271b1;background:#2271b1;color:#fff;border-radius:4px;cursor:pointer}\\n.mtd-form .mtd-add-btn:hover{background:#135e96;border-color:#135e96}\\n.mtd-list{list-style:none;margin:0;padding:0}\\n.mtd-item{display:flex;align-items:center;gap:.6em;padding:.4em .2em;border-bottom:1px solid rgba(0,0,0,.04)}\\n.mtd-item:last-child{border-bottom:0}\\n.mtd-toggle{width:1.2em;height:1.2em;border:1px solid #8c8f94;border-radius:3px;background:#fff;cursor:pointer;position:relative}\\n.mtd-item.is-done .mtd-toggle{background:#2271b1;border-color:#2271b1}\\n.mtd-item.is-done .mtd-toggle:after{content:'';position:absolute;left:.28em;top:.1em;width:.3em;height:.6em;border:2px solid #fff;border-top:0;border-left:0;transform:rotate(45deg)}\\n.mtd-text{flex:1}\\n.mtd-item.is-done .mtd-text{text-decoration:line-through;color:#6c757d}\\n.mtd-delete{margin-left:auto;background:transparent;border:0;color:#b32d2e;cursor:pointer}\\n.mtd-delete:hover{color:#8a2425}\\n.mtd-login-prompt{margin:.5em 0}\\n.screen-reader-text{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}\\n\",\n  \"minimal-to-do/assets/js/main.js\": \"(function($){\\n    'use strict';\\n\\n    function renderItem(task){\\n        var li = $('<li/>', {\\n            'class': 'mtd-item' + (task.done ? ' is-done' : ''),\\n            'data-id': task.id\\n        });\\n        var toggle = $('<button/>', {'type':'button','class':'mtd-toggle','aria-pressed': task.done ? 'true':'false'}).append($('<span/>',{'class':'screen-reader-text',text: 'Toggle done'}));\\n        var text = $('<span/>', {'class':'mtd-text', text: task.text});\\n        var del = $('<button/>', {'type':'button','class':'mtd-delete','aria-label':'Delete task'}).append($('<span/>',{'class':'screen-reader-text',text: 'Delete'}));\\n        li.append(toggle, text, del);\\n        return li;\\n    }\\n\\n    function onAdd(e){\\n        e.preventDefault();\\n        var $wrap = $(e.delegateTarget).closest('.mtd-wrapper');\\n        var $input = $(e.delegateTarget).find('input[name=\\\"task\\\"]');\\n        var val = ($input.val() || '').trim();\\n        if(!val){ return; }\\n        $.post(MTD.ajax_url, {\\n            action: 'mtd_add',\\n            nonce: MTD.nonce,\\n            task: val\\n        }).done(function(resp){\\n            if(resp && resp.success && resp.data && resp.data.task){\\n                var $list = $wrap.find('.mtd-list');\\n                $list.prepend(renderItem(resp.data.task));\\n                $input.val('');\\n            }\\n        });\\n    }\\n\\n    function onToggle(e){\\n        var $btn = $(e.currentTarget);\\n        var $li = $btn.closest('.mtd-item');\\n        var id = $li.data('id');\\n        if(!id){ return; }\\n        $.post(MTD.ajax_url, {\\n            action: 'mtd_toggle',\\n            nonce: MTD.nonce,\\n            id: id\\n        }).done(function(resp){\\n            if(resp && resp.success && resp.data && resp.data.task){\\n                var done = !!resp.data.task.done;\\n                $li.toggleClass('is-done', done);\\n                $btn.attr('aria-pressed', done ? 'true' : 'false');\\n            }\\n        });\\n    }\\n\\n    function onDelete(e){\\n        var $btn = $(e.currentTarget);\\n        var $li = $btn.closest('.mtd-item');\\n        var id = $li.data('id');\\n        if(!id){ return; }\\n        $.post(MTD.ajax_url, {\\n            action: 'mtd_delete',\\n            nonce: MTD.nonce,\\n            id: id\\n        }).done(function(resp){\\n            if(resp && resp.success){\\n                $li.remove();\\n            }\\n        });\\n    }\\n\\n    $(document).on('submit', '.mtd-form', onAdd);\\n    $(document).on('click', '.mtd-toggle', onToggle);\\n    $(document).on('click', '.mtd-delete', onDelete);\\n})(jQuery);\\n\",\n  \"minimal-to-do/languages/minimal-to-do.pot\": \"msgid \\\"\\\"\\nmsgstr \\\"\\\"\\n\\\"Project-Id-Version: Minimal To-Do 1.0.0\\\\n\\\"\\n\\\"POT-Creation-Date: 2025-08-23 00:00+0000\\\\n\\\"\\n\\\"MIME-Version: 1.0\\\\n\\\"\\n\\\"Content-Type: text/plain; charset=UTF-8\\\\n\\\"\\n\\\"Content-Transfer-Encoding: 8bit\\\\n\\\"\\n\\\"X-Generator: makeplugin\\\\n\\\"\\n\\\"X-Domain: minimal-to-do\\\\n\\\"\\n\\n#: minimal-to-do/minimal-to-do.php:49\\nmsgid \\\"Delete\\\"\\nmsgstr \\\"\\\"\\n\\n#: minimal-to-do/minimal-to-do.php:51\\nmsgid \\\"Done\\\"\\nmsgstr \\\"\\\"\\n\\n#: minimal-to-do/minimal-to-do.php:53\\nmsgid \\\"Add a task\u2026\\\"\\nmsgstr \\\"\\\"\\n\\n#: minimal-to-do/minimal-to-do.php:55\\nmsgid \\\"Add\\\"\\nmsgstr \\\"\\\"\\n\\n#: minimal-to-do/minimal-to-do.php:71\\nmsgid \\\"Please <a href=\\\\\\\"%s\\\\\\\">sign in</a> to manage your to\u2011do list.\\\"\\nmsgstr \\\"\\\"\\n\\n#: minimal-to-do/minimal-to-do.php:79\\nmsgid \\\"Add a task\\\"\\nmsgstr \\\"\\\"\\n\\n#: minimal-to-do/templates/item.php:21\\nmsgid \\\"Toggle done\\\"\\nmsgstr \\\"\\\"\\n\\n#: minimal-to-do/templates/item.php:23\\nmsgid \\\"Delete task\\\"\\nmsgstr \\\"\\\"\\n\",\n  \"minimal-to-do/readme.txt\": \"=== Minimal To\u2011Do ===\\nContributors: makeplugin\\nTags: to-do, todo, tasks, minimal, user, list\\nRequires at least: 5.2\\nTested up to: 6.8\\nStable tag: 1.0.0\\nRequires PHP: 7.4\\nLicense: GPLv2 or later\\n\\nA small, per\u2011user to\u2011do list that can be placed on public pages.\\n\\n== Description ==\\nProvide a clean, distraction\u2011free to\u2011do list where logged\u2011in users can add a task (text only), mark it done/undone, and delete it. Lists are personal per user (login\u2011based) and persist across sessions. The to\u2011do can be placed on any public page; when viewed by a logged\u2011in user it shows their own list, and guests see a simple sign\u2011in prompt instead of controls. Keep the interface minimal with a single input and a simple list; default order is newest on top. No extra fields (no dates, priorities, categories) and no bulk actions or editing beyond toggle and delete. Use unobtrusive styling that blends with the site.\\n\\n== Installation ==\\n1. Upload the plugin files to the `/wp-content/plugins/minimal-to-do` directory, or install the plugin through the WordPress plugins screen directly.\\n2. Activate the plugin through the 'Plugins' screen in WordPress.\\n3. Add the shortcode `[minimal_todo]` to any page or post.\\n\\n== Frequently Asked Questions ==\\n= Who can see the tasks? =\\nOnly the logged\u2011in user can see and manage their own tasks when viewing the page. Guests will see a sign\u2011in prompt.\\n\\n= Can I add due dates or priorities? =\\nNo. This plugin is intentionally minimal: text\u2011only tasks with toggle and delete actions.\\n\\n== Screenshots ==\\n1. Minimal to\u2011do list on a page.\\n\\n== Changelog ==\\n= 1.0.0 =\\n* Initial release.\\n\\n== Upgrade Notice ==\\n= 1.0.0 =\\nInitial release.\\n\",\n  \"minimal-to-do/uninstall.php\": \"<?php\\nif (!defined('WP_UNINSTALL_PLUGIN')) {\\n    exit;\\n}\\n\\n// Clean up all plugin data: remove user meta storing tasks for all users.\\n$users = get_users(array(\\n    'fields' => array('ID'),\\n));\\nif (!empty($users)) {\\n    foreach ($users as $user) {\\n        delete_user_meta((int) $user->ID, 'mtd_tasks');\\n    }\\n}\\n\"\n}\n```"
    }
  ]
}